#!/usr/bin/env python
#
# multimem - Report memory usage including Proportional set size (PSS) for a multi process program on Linux
#
# Usage: multimem [--brief] [pid]
#
# Copyright 2017 Takashi Yamamiya <tyamamiya@xevo.com>
#
# This software may be used and distributed according to the terms of
# the GNU General Public License version 2 or later, incorporated
# herein by reference.

import smem.smem
# import pprint
from collections import defaultdict
import sys


def get_pid_to_ppid(proc):
    pid_to_ppid = {}
    pids = proc.pids()
    for pid in pids:
        try:
            status = proc.status(pid)
        except IOError:
            "Maybe when pid does not exist anymore"
            continue
        parent = ''
        for line in status:
            field = line.split()
            if field[0] == "PPid:":
                parent = int(field[1])
                break
        pid_to_ppid[pid] = parent
    return pid_to_ppid


def get_ppid_to_pids(proc):
    """Return map from parent pid to the child pids like {0: [1], 1: [2,3,4,5], ...}"""
    ppid_to_pids = defaultdict(list)
    for pid, parent in get_pid_to_ppid(proc).items():
        ppid_to_pids[parent].append(pid)
    # pprint.pprint(dict(ppid_to_pids))
    return ppid_to_pids


def show_tree_line(name, swap, uss, pss, rss):
    print("%-40s %8s %8s %8s %8s" % (name, swap, uss, pss, rss))


def show_tree_rest(proc, tree, indent):
    indent_str = "  " * indent
    name = "%s(%s) %s" % (indent_str, tree[0], proc.pidname(tree[0]))
    if tree[1]:
        show_tree_line(name, tree[1]["swap"], tree[
                       1]["uss"], tree[1]["pss"], tree[1]["rss"])
    else:
        show_tree_line(name, "?", "?", "?", "?")
    for child in tree[2]:
        show_tree_rest(proc, child, indent + 1)


def show_tree_total(tree):
    (total, accurate) = get_total(tree)
    if accurate:
        format = "%s"
    else:
        format = "?%s"
    show_tree_line("Total", format % total["swap"],
                   format % total["uss"], format % total["pss"], format % total["rss"])


def show_line():
    print("-" * (40 + 8 + 8 + 8 + 8 + 4))


def show_tree(proc, tree):
    show_tree_line("(PID) Name", "SWAP", "USS", "PSS", "RSS")
    show_line()
    show_tree_rest(proc, tree, 0)
    show_line()
    show_tree_total(tree)


def get_statistics_tree(proc, ppid_to_pids, pid):
    """Return A tree of (pid, statistics, children)"""
    children = [get_statistics_tree(proc, ppid_to_pids, child)
                for child in ppid_to_pids[pid]]
    try:
        statistics = smem.smem.pidtotals(proc, pid)
    except IOError:
        statistics = None
    return (pid, statistics, children)


def get_total(tree):
    """Retutn (total, accurate) where total is the sum of all field in the tree, accurate is True if all item has statistics"""
    total = tree[1] or {}
    accurate = total != {}
    for each in tree[2]:
        (subtotal, acc) = get_total(each)
        if not acc:
            accurate = False
        if subtotal:
            for key, value in subtotal.items():
                total[key] = value + total.get(key, 0)
    return (total, accurate)


def show_statistics_tree(proc, pid):
    ppid_to_pids = get_ppid_to_pids(proc)
    tree = get_statistics_tree(proc, ppid_to_pids, pid)
    show_tree(proc, tree)


def show_pss_only(proc, pid):
    ppid_to_pids = get_ppid_to_pids(proc)
    tree = get_statistics_tree(proc, ppid_to_pids, pid)
    (total, accurate) = get_total(tree)
    if accurate:
        format = "%s"
    else:
        format = "?%s"
    print(format % total["pss"])


def usage():
    print("Usage: multimem [--brief] [pid]")
    print("--brief options show only PSS")
    exit(1)


def main():
    # Parse the arguments manually to reduce external dependency
    options_brief = False
    options_positional = []
    for arg in sys.argv[1:]:
        if arg.startswith("-"):
            if arg == "-b" or arg == "--brief":
                options_brief = True
            else:
                print("Unknown argument: %s" % arg)
                usage()
        else:
            options_positional.append(arg)

    if len(options_positional) == 0:
        pid = 1
    elif len(options_positional) == 1:
        pid = int(options_positional[0])
    else:
        usage()

    smem.smem.set_options(None)
    proc = smem.smem.procdata("")
    if options_brief:
        show_pss_only(proc, pid)
    else:
        show_statistics_tree(proc, pid)

if __name__ == "__main__":
    main()
